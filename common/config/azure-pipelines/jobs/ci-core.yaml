parameters:
#   name: ''
#   pool: ''
  nodeVersion: ''
  
# resources: #Refernce nick's template from azure repo
#   repositories:
#     - repository: imodel02_templates
#       type: git
#       name: imodel02
#       endpoint: iModelTechnologies

# jobs:
# - job:
#   strategy:
#     matrix:
#       "Windows_${{ parameters.name }}":
#         OS: windows-latest
#         platform: Windows_NT
#         name: $(win_pool)
#         VAR_GROUP: 'WindowsCheck' #Set correct var goup name
#       "Linux_${{ parameters.name }}":
#         OS: ubuntu-latest
#         platform: Linux
#         name: $(linux_pool)
#         VAR_GROUP: 'LinuxCheck'
#       "MacOS_${{ parameters.name }}":
#         OS: macOS-latest
#         platform: Darwin
#         name: $(mac_pool)
#         VAR_GROUP: 'MacOSCheck'

#   timeoutInMinutes: 120

#   pool: ${{ parameters.pool }}
  
#   ${{ if eq(parameters.useLocalAddon, true) }}:
#     variables:
#       - group: $(VAR_GROUP)

#   workspace:
#     clean: all

  steps:
#     ${{ if eq(parameters.useLocalAddon, true) }}:
#       - template: build/templates/install-node-addon-from-artifact.yaml@imodel02_templates #Download local artifact
    - checkout: iTwin/itwinjs-core/Build.SourceBranchName #Temp fix, branch name must be the same on both native and TS side
      clean: true
    - task: NodeTool@0
      displayName: "Use Node ${{ parameters.nodeVersion }}"
      inputs:
        versionSpec: ${{ parameters.nodeVersion }}
        checkLatest: true

    - script: |
        git config --local user.email imodeljs-admin@users.noreply.github.com
        git config --local user.name imodeljs-admin
      displayName: git config

    - powershell: |
        # Get the new version number.
        $json = Get-Content -Raw -Path common/config/rush/version-policies.json | ConvertFrom-Json
        $currVersion = $json[0].version

        $newBuildNumber = $currVersion + "_$(Build.BuildNumber)"

        Write-Host "##vso[build.updatebuildnumber]$newBuildNumber"
      displayName: Set build number
      condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

    - template: ../templates/core-build.yaml

    # Will run if even there is a failure somewhere else in the pipeline.
    - template: ../templates/publish-test-results.yaml
      parameters:
        NodeVersion: ${{ parameters.nodeVersion }}
    # The publish script identifies any new packages not previously published and tags the build
    - template: ../templates/publish.yaml
